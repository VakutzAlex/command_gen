1. Display all components part of the command:
        #ModuleID#CommandID#Size#Data[Size]#
    -> make use of the .setVisible() method

2. Rework on the generateCommand method so that it works for all modules

3. Try and implement classes for each module, maybe even go with the inheritance idea)
    -> public Class module -> general fields and methods that a module has
    -> public Class thermal -> specific module that inherits the module class and also implements specific operations

4. Eventually try and move all the gui code to .fxml

5. Data fields to be dynamically generated

6. Add a new dat field where one can add a long input string that then will be put in the Data[] fields

7. Remove all data[] text fields and have them be replaced by on singular field in which one inputs whatever command he wishes that is then converter at generation

8. Have the size label auto-update as on progresses with data input so that it will be "self-sufficient" and not predefined

9. Have a class called comamnd ID which all the other classes will extend. Each class will have the same module ID, however, the  command IDs will differ from class to class
    e.g: one class may have only 3 commands and another class might have 5-6 commands

10. Use map to map command name with command ID, thus, after user selects a command (e.g: add) then, when displaying, I will be able to use .get("add") => commandID value

11. Add legend to how the command is supposed to look like, for each command (regarding the data[] meanings)

12. Rework breakStringsToList function

13. Add configuration file:

Module IDs:

ModuleName        Value
Module1           0
Module2           1
Module3           2
.
.
.

Component IDs:

ModuleName_CommandIDName        Value
Module1_CommandID1              0
Module1_CommandID2              1
Module1_CommandID3              2
.
.
.

EOD


To run app use command:

java â€”jar CommandGenerator.jar


generate.setOnAction(e -> {
            generatedCommand.clear();

            Integer module = getModuleID(moduleID.getText());
            String command = Integer.toHexString(getCommandID(module1_CommandID.getText()));
            Integer sizeVal = getSize(size.getText());


            if (command.equals("2")) {
                String addMACAddress = getData(dataField);
                generatedCommand.setText("#" + module + "#" + "0x" + command + "#" + sizeVal + "#" + addMACAddress);
            } else if (command.equals("1")) {
                String delMACAddress = getData(dataField);
                generatedCommand.setText("#" + module + "#" + "0x" + command + "#" + sizeVal + "#" + delMACAddress);
            } else {
                generatedCommand.setText("#" + module + "#" + "0x" + command + "#" + sizeVal + "#");
            }
        });



generate.setOnAction(e -> {
            Integer moduleIDValue = getModuleID(moduleID.getText());
            Integer commandIDValue;

            if(moduleIDValue == 1){
                commandIDValue = getCommandID(module1_CommandID.getText(), moduleIDValue);
            }else if(moduleIDValue == 2){
                commandIDValue = getCommandID(module2_CommandID.getText(), moduleIDValue);
            }else {
                commandIDValue = getCommandID(module3_CommandID.getText(), moduleIDValue);
            }
            String sizeValue = size.getText();

            if(commandIDValue == 12){
//                String dataValue = getData(dataField);
//                generatedCommand.setText("#" + moduleIDValue + "#" + commandIDValue + "#" + sizeValue + "#" + dataValue);
            }else if(commandIDValue == 13){
//                String dataValue = getData(dataField);
//                generatedCommand.setText("#" + moduleIDValue + "#" + commandIDValue + "#" + sizeValue + "#" + dataValue);
            }else {
                generatedCommand.setText("#" + moduleIDValue + "#" + commandIDValue + "#" + sizeValue + "#");
            }
        });



// mod1_commandID2
        mod1_commandID2.setOnAction(e -> {
            module1_CommandID.setText(mod1_commandID2.getText());

            generatedCommand.clear();

            if (dataFieldsCreated.get() == 0) {
                size.setText("7");

                for (int i = 0; i < 7; i++) {
                    Label dataLabelLocal = new Label("#Data[" + i + "]#");
                    TextField data = new TextField();

                    dataLabel[i] = dataLabelLocal;
//                    dataField[i] = data;

                    grid.add(dataLabelLocal, 3 + i, 0);
                    grid.add(data, 3 + i, 1);
                }

                dataFieldsCreated.set(1);
                dataFieldsCreatedIsEnabled.set(1);
            } else if (dataFieldsCreatedIsEnabled.get() == 1) {
//                enableDisableDataFields(dataFieldsCreatedIsEnabled, dataLabel, dataField, true);
                dataInput.setEditable(true);
            }
        });

        // mod1_commandID3
        mod1_commandID3.setOnAction(e -> {
            module1_CommandID.setText(mod1_commandID3.getText());

            generatedCommand.clear();

            if (dataFieldsCreated.get() == 0) {
                size.setText("7");

                for (int i = 0; i < 7; i++) {
                    Label dataLabelLocal = new Label("#Data[" + i + "]#");
                    TextField data = new TextField();

                    dataLabel[i] = dataLabelLocal;
//                    dataField[i] = data;

                    grid.add(dataLabelLocal, 3 + i, 0);
                    grid.add(data, 3 + i, 1);
                }

                dataFieldsCreated.set(1);
                dataFieldsCreatedIsEnabled.set(1);
            } else if (dataFieldsCreatedIsEnabled.get() == 1) {
//                enableDisableDataFields(dataFieldsCreatedIsEnabled, dataLabel, dataField, true);
                dataInput.setEditable(true);
            }
        });